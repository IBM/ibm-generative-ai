interactions:
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
    method: GET
    uri: https://api.com/v2/text/generation/limits?version=2023-11-22
  response:
    body:
      string: '{"result":{"concurrency":{"limit":10,"remaining":10}}}'
    headers:
      cache-control:
      - private
      content-length:
      - '54'
      content-type:
      - application/json; charset=utf-8
      content-version:
      - '2023-11-22'
      date:
      - Mon, 20 May 2024 14:12:17 GMT
      keep-alive:
      - timeout=72
      set-cookie:
      - 2eef5f4c257f6bca76e8da5586743beb=de04e502e3969a930842cae695f31f86; path=/;
        HttpOnly; Secure; SameSite=None
      vary:
      - accept-encoding
    status:
      code: 200
      message: OK
- request:
    body: '{"input": "I will ask you to perform a task, your job is to come up with
      a series of simple commands in Python that will perform the task.\nTo help you,
      I will give you access to a set of tools that you can use. Each tool is a Python
      function and has a description explaining the task it performs, the inputs it
      expects and the outputs it returns.\nYou should first explain which tool you
      will use to perform the task and for what reason, then write the code in Python.\nEach
      instruction in Python should be a simple assignment. You can print intermediate
      results if it makes sense to do so.\n\nTools:\n- document_qa: This is a tool
      that answers a question about an document (pdf). It takes an input named `document`
      which should be the document containing the information, as well as a `question`
      that is the question about the document. It returns a text that contains the
      answer to the question.\n- image_captioner: This is a tool that generates a
      description of an image. It takes an input named `image` which should be the
      image to caption, and returns a text that contains the description in English.\n-
      image_qa: This is a tool that answers a question about an image. It takes an
      input named `image` which should be the image containing the information, as
      well as a `question` which should be the question in English. It returns a text
      that is the answer to the question.\n- image_segmenter: This is a tool that
      creates a segmentation mask of an image according to a label. It cannot create
      an image. It takes two arguments named `image` which should be the original
      image, and `label` which should be a text describing the elements what should
      be identified in the segmentation mask. The tool returns the mask.\n- transcriber:
      This is a tool that transcribes an audio into text. It takes an input named
      `audio` and returns the transcribed text.\n- summarizer: This is a tool that
      summarizes an English text. It takes an input `text` containing the text to
      summarize, and returns a summary of the text.\n- text_classifier: This is a
      tool that classifies an English text using provided labels. It takes two inputs:
      `text`, which should be the text to classify, and `labels`, which should be
      the list of labels to use for classification. It returns the most likely label
      in the list of provided `labels` for the input text.\n- text_qa: This is a tool
      that answers questions related to a text. It takes two arguments named `text`,
      which is the text where to find the answer, and `question`, which is the question,
      and returns the answer to the question.\n- text_reader: This is a tool that
      reads an English text out loud. It takes an input named `text` which should
      contain the text to read (in English) and returns a waveform object containing
      the sound.\n- translator: This is a tool that translates text from a language
      to another. It takes three inputs: `text`, which should be the text to translate,
      `src_lang`, which should be the language of the text to translate and `tgt_lang`,
      which should be the language for the desired ouput language. Both `src_lang`
      and `tgt_lang` are written in plain English, such as ''Romanian'', or ''Albanian''.
      It returns the text translated in `tgt_lang`.\n- image_transformation: This
      is a tool that transforms an image according to a prompt and returns the modified
      image.\n- text_downloader: This is a tool that downloads a file from a `url`.
      It takes the `url` as input, and returns the text contained in the file.\n-
      image_generator: This is a tool that creates an image according to a prompt,
      which is a text description.\n- video_generator: This is a tool that creates
      a video according to a text description. It takes an optional input `seconds`
      which will be the duration of the video. The default is of two seconds. The
      tool outputs a video object.\n\n\nTask: \"Answer the question in the variable
      `question` about the image stored in the variable `image`. The question is in
      French.\"\n\nI will use the following tools: `translator` to translate the question
      into English and then `image_qa` to answer the question on the input image.\n\nAnswer:\n```py\ntranslated_question
      = translator(question=question, src_lang=\"French\", tgt_lang=\"English\")\nprint(f\"The
      translated question is {translated_question}.\")\nanswer = image_qa(image=image,
      question=translated_question)\nprint(f\"The answer is {answer}\")\n```\n\nTask:
      \"Identify the oldest person in the `document` and create an image showcasing
      the result.\"\n\nI will use the following tools: `document_qa` to find the oldest
      person in the document, then `image_generator` to generate an image according
      to the answer.\n\nAnswer:\n```py\nanswer = document_qa(document, question=\"What
      is the oldest person?\")\nprint(f\"The answer is {answer}.\")\nimage = image_generator(answer)\n```\n\nTask:
      \"Generate an image using the text given in the variable `caption`.\"\n\nI will
      use the following tool: `image_generator` to generate an image.\n\nAnswer:\n```py\nimage
      = image_generator(prompt=caption)\n```\n\nTask: \"Summarize the text given in
      the variable `text` and read it out loud.\"\n\nI will use the following tools:
      `summarizer` to create a summary of the input text, then `text_reader` to read
      it out loud.\n\nAnswer:\n```py\nsummarized_text = summarizer(text)\nprint(f\"Summary:
      {summarized_text}\")\naudio_summary = text_reader(summarized_text)\n```\n\nTask:
      \"Answer the question in the variable `question` about the text in the variable
      `text`. Use the answer to generate an image.\"\n\nI will use the following tools:
      `text_qa` to create the answer, then `image_generator` to generate an image
      according to the answer.\n\nAnswer:\n```py\nanswer = text_qa(text=text, question=question)\nprint(f\"The
      answer is {answer}.\")\nimage = image_generator(answer)\n```\n\nTask: \"Caption
      the following `image`.\"\n\nI will use the following tool: `image_captioner`
      to generate a caption for the image.\n\nAnswer:\n```py\ncaption = image_captioner(image)\n```\n\nTask:
      \"Summarize the chat\"\n\nI will use the following", "model_id": "meta-llama/llama-2-70b",
      "parameters": {"max_new_tokens": 500, "stop_sequences": ["Task:"]}}'
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '6135'
      content-type:
      - application/json
    method: POST
    uri: https://api.com/v2/text/generation?version=2024-03-19
  response:
    body:
      string: '{"id":"22234f91-ef73-4721-9c85-04a22aad9296","model_id":"meta-llama/llama-2-70b","created_at":"2024-05-20T14:12:25.703Z","results":[{"generated_text":"
        tool: `summarizer` to generate a summary of the chat.\n\nAnswer:\n```py\n))","generated_token_count":25,"input_token_count":1490,"stop_reason":"eos_token","seed":3150004800}]}'
    headers:
      content-length:
      - '327'
      content-type:
      - application/json; charset=utf-8
      content-version:
      - '2024-03-19'
      date:
      - Mon, 20 May 2024 14:12:25 GMT
      keep-alive:
      - timeout=72
      vary:
      - accept-encoding
    status:
      code: 200
      message: OK
version: 1

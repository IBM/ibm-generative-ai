[tool.poetry]
name = "ibm-generative-ai"
authors = [
  "Tomas Dvorak <tomas.dvorak@ibm.com>",
  "Radek Jezek <radek.jezek@ibm.com>",
  "David Kristek <david.kristek@ibm.com>",
]
maintainers = [
  "Tomas Dvorak <tomas.dvorak@ibm.com>",
  "Radek Jezek <radek.jezek@ibm.com>",
]
description = "IBM Generative AI is a Python library built on IBM's large language model REST interface."
readme = "README.md"
version = "0.0.0"
packages = [{include = "genai", from="src"}]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"

[tool.poetry-dynamic-versioning.substitution]
folders = [
  { path = "src" }
]

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.0.0"
python-dotenv = "^1.0.0"
aiohttp = "^3.9.0"
httpx = "^0.26.0"
aiolimiter = "1.1.0"
httpx-sse = "^0.3.0"
langchain = { version = "~0.0.267",  optional = true }
pyyaml = { version = "^6.0.0", optional = true }
datasets = { version = "^2.13.0",  optional = true }
transformers = { version = "^4.33.3",  optional = true, extras=["agents"] }
llama-index = { version = "^0.9.15",  optional = true }
uvicorn = { version = "^0.22.0",  optional = true }
fastapi = { version = "^0.100.0",  optional = true }

[tool.black] # left for IDE compatibility (pycharm)
line-length = 120

[tool.ruff]
line-length = 120
extend-exclude = ['src/genai/_version.py']
select = [ # See docs for available rules: https://docs.astral.sh/ruff/rules
  "B",   # bugbear (assignment to os.environ, assert False, ...)
  "C",   # mccabe (too complex structures, ...)
  "E",   # error (line too long, syntax error, ...)
  "F",   # pyflakes (unused imports, variables, ...)
  "I",   # isort
  "W",   # pycodestyle (indentation, whitespace, ...)
  "T20", # flake8-print (print found, pprint found, ...)
]
target-version = "py39"

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"] # Ignore import violations in all `__init__.py` files.
"examples/**/*.py" = ["T201", "T203", "B904"] # Examples can include print and pprint, ignore exception propagation
"src/genai/_generated/*.py" = ["E501"] # Generated can include long lines
"tests/unit/docs_examples_generator/assets/**/*.py" = ["T201"] # Allow prints

[tool.ruff.lint.isort]
known-first-party = ["genai"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.2"
pytest-dotenv = "^0.5.2"
pre-commit = "^3.3.2"
pytest-cov = "^4.1.0"
sphinx = "^6.1.3"
furo = "^2022.12.7"
twine = "^4.0.2"
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.10.0"
setuptools-scm = "^7.1.0"
pytest-httpx = "^0.28.0"
build = "^0.10.0"
datamodel-code-generator = { version="^0.25.2", extras=["http"] }
vcrpy = { "git" = "https://github.com/kevin1024/vcrpy.git" }
pytest-recording = "^0.13.1"
pytest-subtests = "^0.11.0"
autodoc_pydantic = "^2.0.0"
ruff = "^0.1.11"
poethepoet = "^0.24.4"
pandas = "^2.0.0"
pyyaml = "^6.0.0"

[tool.poetry.extras]
langchain = ["langchain", "pyyaml"]
huggingface = ["datasets", "transformers"]
llama-index = ["llama-index"]
localserver = ["uvicorn", "fastapi"]

[tool.pytest.ini_options]
addopts = "--cov --cov-report term-missing --cov-fail-under 80"
markers = [
    "unit",
    "integration",
    "e2e",
    "extension"
]
env_files = [
    ".test.env"
]
pythonpath = ["src", "scripts"]

[tool.coverage.run]
source = ["src"]

[tool.setuptools_scm]
write_to = "src/genai/_version.py"
local_scheme = "no-local-version"

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src,$MYPY_CONFIG_FILE_DIR/scripts,$MYPY_CONFIG_FILE_DIR/tests"
exclude = "^build/$"
check_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.poe.tasks.install]
help = "Install dependencies for the SDK core and it's extensions"
cmd = "poetry install --all-extras --without dev"

[tool.poe.tasks.install-dev]
help = "Install dependencies and related tooling for development"
sequence = [{ cmd = "poetry install --all-extras" }, { cmd = "pre-commit install" }]
deps = ["install"]

[tool.poe.tasks.clean]
help = "Remove all artifacts and builds"
sequence = [
    { script = "shutil:rmtree('build/', ignore_errors=1)"},
    { script = "shutil:rmtree('dist/', ignore_errors=1)"},
    { ref = "docs --type=clear" }
]

[tool.poe.tasks.format]
help = "Run all formating tools"
sequence = [
  { "cmd" = "ruff format"}, # format code
  { "cmd" = "ruff check --select I --fix" } # sort imports
]


[tool.poe.tasks.lint]
help = "Check for errors and fix them using ruff (includes isort)"
cmd = "ruff check --fix"

[tool.poe.tasks.schema]
help = "Generate Pydantic models and endpoints information from OpenAPI"
env = { "PYTHONPATH" = "scripts" }
sequence = [{ cmd = "python scripts/types_generator/main.py" }, { ref = "format", "cwd" = "src/genai/_generated"}]


[tool.poe.tasks.docs]
help = "Documentation related commands"
control.expr = "type"
args = ["type"]

    [[tool.poe.tasks.docs.switch]]
    case = "help"
    help = "Show help"
    cwd = "documentation"
    cmd = "make"

    [[tool.poe.tasks.docs.switch]]
    case = "build"
    help = "Update sources for the documentation and build static HTML"
    sequence = [
        "docs --type=clear",
        { cmd = "make apidoc", cwd = "documentation" },
        { cmd = "python scripts/docs_examples_generator/main.py", env = { PYTHONPATH="scripts" }},
        { cmd = "make html", cwd = "documentation" }
    ]

    [[tool.poe.tasks.docs.switch]]
    case = "open"
    cwd = "documentation"
    help = "Open HTML Documentation"
    cmd = "open build/html/index.html"

    [[tool.poe.tasks.docs.switch]]
    case = "clear"
    cwd = "documentation"
    help = "Remove build"
    sequence = [{ "script" = "shutil:rmtree('build/', ignore_errors=1)" }, { "script" = "shutil:rmtree('source/rst_source', ignore_errors=1)" }, { cmd = "make clean" }]

[tool.poe.tasks.test]
args = ["type"]
control.expr = "type"

    [[tool.poe.tasks.test.switch]]
    case = "unit"
    help = "Run Unit Tests"
    cmd = "pytest -m 'unit'"

    [[tool.poe.tasks.test.switch]]
    case = "integration"
    help = "Run Integration Tests"
    cmd = "pytest -m 'integration' tests/integration"

    [[tool.poe.tasks.test.switch]]
    case = "extension"
    help = "Run Extension Tests"
    cmd = "pytest -m 'integration'"

    [[tool.poe.tasks.test.switch]]
    case = "e2e"
    help = "Run E2E Tests"
    cmd = "pytest -m 'e2e'"

    [[tool.poe.tasks.test.switch]]
    case = "rewrite_casettes"
    help = "Rewrite casettes for failed tests (usually due to API endpoint version update)"
    cmd = "scripts/rewrite_casettes.sh"

    [[tool.poe.tasks.test.switch]]
    help = "Run All Tests"
    cmd = "pytest"
